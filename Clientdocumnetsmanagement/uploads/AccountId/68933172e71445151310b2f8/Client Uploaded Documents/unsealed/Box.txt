 <Box>
        <form>
          <Box>
            <Typography variant="h5" gutterBottom>
              {" "}
              Edit Pipelines
            </Typography>
            <Box mt={2} mb={2}>
              <hr />
            </Box>
            <Grid container spacing={2}>
              <Grid xs={12} sm={5.8}>
                <Box>
                  <InputLabel sx={{ color: "black" }}>Pipeline Name</InputLabel>

                  <TextField
                    size="small"
                    margin="normal"
                    placeholder="Pipeline Name"
                    fullWidth
                    value={piplineName}
                    onChange={(e) => setPipeLineName(e.target.value)}
                  />
                </Box>
                <Box mt={1}>
                  <InputLabel sx={{ color: "black" }}>Available To</InputLabel>
                  <Autocomplete
                    multiple
                    sx={{ marginTop: "8px" }}
                    options={options}
                    size="small"
                    getOptionLabel={(option) => option.label}
                    value={selectedUser}
                    onChange={handleUserChange}
                    renderOption={(props, option) => (
                      <Box
                        component="li"
                        {...props}
                        sx={{ cursor: "pointer", margin: "5px 10px" }}
                      >
                        {option.label}
                      </Box>
                    )}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        variant="outlined"
                        placeholder="Available To"
                      />
                    )}
                    isOptionEqualToValue={(option, value) =>
                      option.value === value.value
                    }
                  />
                </Box>
                <Box mt={2}>
                  <InputLabel sx={{ color: "black" }}>Sort jobs by</InputLabel>

                  <Autocomplete
                    className="select-dropdown"
                    options={optionsort}
                    value={selectedSortByJob}
                    onChange={(event, newValue) =>
                      handleSortingByJobs(newValue)
                    }
                    getOptionLabel={(option) => option.label || ""}
                    renderOption={(props, option) => (
                      <Box
                        component="li"
                        {...props}
                        sx={{ cursor: "pointer", margin: "5px 10px" }}
                      >
                        {option.label}
                      </Box>
                    )}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        placeholder="Sort By Job"
                        size="small"
                        sx={{ width: "100%", marginTop: "8px" }}
                        variant="outlined"
                        InputLabelProps={{ shrink: true }}
                      />
                    )}
                    isOptionEqualToValue={(option, value) =>
                      option.value === value.value
                    }
                    disableClearable={false}
                    clearOnEscape
                  />
                </Box>

                <Box mt={2}>
                  <InputLabel sx={{ color: "black" }}>
                    Default job template
                  </InputLabel>

                  <Autocomplete
                    className="select-dropdown"
                    options={optiontemp}
                    value={selectedJobtemp}
                    onChange={handleJobtemp}
                    getOptionLabel={(option) => option.label || ""}
                    renderOption={(props, option) => (
                      <Box
                        component="li"
                        {...props}
                        sx={{ cursor: "pointer", margin: "5px 10px" }}
                      >
                        {option.label}
                      </Box>
                    )}
                    renderInput={(params) => (
                      <TextField
                        {...params}
                        placeholder="Default job template"
                        size="small"
                        sx={{ width: "100%", marginTop: "8px" }}
                        variant="outlined"
                        InputLabelProps={{ shrink: true }}
                      />
                    )}
                    isOptionEqualToValue={(option, value) =>
                      option.value === value.value
                    }
                    disableClearable={false}
                    clearOnEscape
                  />
                </Box>

                <Box mt={3}>
                  <Typography variant="h6">Job card fields</Typography>
                  <Grid container spacing={5} mt={2}>
                    <Grid item xs={4}>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Account_id}
                              onChange={handleAccount_idChange}
                              color="primary"
                            />
                          }
                          label={"Account ID"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Days_on_stage}
                              onChange={handleDays_on_stageChange}
                              color="primary"
                            />
                          }
                          label={"Days on stage"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Account_tags}
                              onChange={handleAccount_tagsChange}
                              color="primary"
                            />
                          }
                          label={"Account tags"}
                        />
                      </Box>
                    </Grid>

                    <Grid item xs={4}>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={startDate}
                              onChange={handleStartDateChange}
                              color="primary"
                            />
                          }
                          label={"Start date"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Name}
                              onChange={handleNameSwitchChange}
                              color="primary"
                            />
                          }
                          label={"Name"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Due_date}
                              onChange={handleDue_dateChange}
                              color="primary"
                            />
                          }
                          label={"Due date"}
                        />
                      </Box>
                    </Grid>

                    <Grid item xs={4}>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Description}
                              onChange={handleDescriptionChange}
                              color="primary"
                            />
                          }
                          label={"Description"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Assignees}
                              onChange={handleAssigneesChange}
                              color="primary"
                            />
                          }
                          label={"Assignees"}
                        />
                      </Box>
                      <Box mt={2}>
                        <FormControlLabel
                          control={
                            <Switch
                              checked={Priority}
                              onChange={handlePriorityChange}
                              color="primary"
                            />
                          }
                          label={"Priority"}
                        />
                      </Box>
                    </Grid>
                  </Grid>
                </Box>
              </Grid>
              <Grid
                item
                xs={12}
                sm={0.4}
                sx={{ display: { xs: "none", sm: "block" } }}
              >
                <Box
                  sx={{
                    borderLeft: "1px solid black",
                    height: "100%",
                    ml: 1.5,
                  }}
                ></Box>
              </Grid>
              <Grid xs={12} sm={5.8}>
                <Typography>Default recurrence setting</Typography>
              </Grid>
            </Grid>
            <Box
              mt={5}
              display={"flex"}
              justifyContent={"space-between"}
              alignItems={"center"}
            >
              <Typography variant="h6">Stages</Typography>
              <Button
                variant="contained"
                startIcon={<LuPlusCircle />}
                onClick={() => handleAddStage(stages.length)}
                sx={{
                  backgroundColor: "var(--color-save-btn)", // Normal background

                  "&:hover": {
                    backgroundColor: "var(--color-save-hover-btn)", // Hover background color
                  },
                  borderRadius: "15px",
                }}
              >
                Add stage
              </Button>
            </Box>
            <Box mt={2}>
              <hr />
            </Box>
            <Box>
              <Box
                sx={{
                  display: "flex",
                  gap: "25px",
                  alignContent: "center",
                  marginBottom: "10px",
                  flexDirection: { xs: "column", sm: "row" },
                }}
              >
                <Box
                  sx={{
                    display: "flex",
                    gap: "10px",
                    overflowX: "auto",
                    overflowY: "auto",
                    whiteSpace: "nowrap",
                    paddingBottom: "8px",
                    maxWidth: "100%",
                    alignItems: "flex-start",
                    minHeight: "300px", // Set a minimum height
                    maxHeight: "500px", // Set a maximum height to trigger vertical scrolling
                  }}
                  className="stage-scroll"
                >
                  {stages.map((stage, index) => (
                    <React.Fragment key={index}>
                      <Box
                        sx={{
                          minWidth: "250px",
                          maxWidth: "270px",
                          padding: "20px",
                          borderRadius: "12px",
                          backgroundColor: "#F5F5F7",
                          boxShadow: "0px 2px 10px rgba(0, 0, 0, 0.1)",
                          flexShrink: 0,
                        }}
                      >
                        <Box>
                          <Box
                            sx={{
                              display: "flex",
                              alignItems: "center",
                              gap: "10px",
                              marginBottom: "10px",
                            }}
                          >
                            <RxDragHandleDots2 />
                            <Box
                              sx={{
                                display: "flex",
                                alignItems: "center",
                                flexGrow: 1,
                                gap: "5px",
                              }}
                            >
                              <TextField
                                variant="standard"
                                placeholder="Stage Name"
                                fullWidth
                                size="small"
                                value={stage.name}
                                onChange={(e) =>
                                  handleStageNameChange(e, index)
                                }
                                multiline // Allow multiple lines
                                sx={{
                                  fontSize: "16px", // Adjust the font size
                                  fontWeight: "500", // Adjust the font weight
                                }}
                                error={!!stageNameErrors[index]}
                                helperText={stageNameErrors[index]}
                                InputProps={{
                                  endAdornment: (
                                    <InputAdornment position="end">
                                      <LuPenLine style={{ fontSize: "10px" }} />
                                    </InputAdornment>
                                  ),
                                }}
                              />
                            </Box>
                            <IconButton
                              onClick={() => handleDeleteStage(index)}
                              sx={{ fontSize: "15px", color: "red" }}
                            >
                              <RiDeleteBin6Line sx={{ cursor: "pointer" }} />
                            </IconButton>
                          </Box>
                          <Divider />
                          <Box sx={{ mt: 2 }}>
                            <Typography variant="subtitle2" fontWeight="bold">
                              Stage conditions
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              {index === 0
                                ? "First stage can't have conditions"
                                : index === stages.length - 1
                                  ? "Last stage can't have conditions"
                                  : "Job enters this stage if conditions are met"}
                            </Typography>

                            <Typography
                              variant="subtitle2"
                              fontWeight="bold"
                              sx={{ mt: 2 }}
                            >
                              Automations
                            </Typography>
                            <Typography variant="body2" color="text.secondary">
                              Triggered when job enters stage
                            </Typography>
                            <Typography
                              variant="body2"
                              sx={{
                                cursor: "pointer",
                                color: "blue",
                                fontWeight: "bold",
                                mt: 1,
                              }}
                              onClick={(e) => handleClick(e, index, "edit")}
                            >
                              {stage.automations.length > 0
                                ? "Edit automation"
                                : "Add automation"}
                            </Typography>
                            <Menu
                              anchorEl={anchorEl}
                              open={Boolean(anchorEl)}
                              onClose={handleClose}
                            >
                              <MenuItem
                                onClick={() =>
                                  handleAddAutomation(
                                    stageSelected,
                                    "Send Email"
                                  )
                                }
                              >
                                Send Email
                              </MenuItem>
                              <MenuItem
                                onClick={() =>
                                  handleAddAutomation(
                                    stageSelected,
                                    "Send Invoice"
                                  )
                                }
                              >
                                Send Invoice
                              </MenuItem>
                              <MenuItem
                                onClick={() =>
                                  handleAddAutomation(
                                    stageSelected,
                                    "Send Proposal/Els"
                                  )
                                }
                              >
                                Send Proposal/Els
                              </MenuItem>
                              <MenuItem
                                onClick={() =>
                                  handleAddAutomation(
                                    stageSelected,
                                    "Create Organizer"
                                  )
                                }
                              >
                                Create Organizer
                              </MenuItem>
                              <MenuItem
                                onClick={() =>
                                  handleAddAutomation(
                                    stageSelected,
                                    "Apply folder template"
                                  )
                                }
                              >
                                Apply folder template
                              </MenuItem>
                            </Menu>
                            <AddAutomationDrawer
                              isDrawerOpen={isDrawerOpen}
                              handleDrawerClose={handleDrawerClose}
                              renderActionContent={renderActionContent}
                              automationSelect={automationSelect}
                              index={index}
                              handleEditClick={handleEditClick}
                              handleEditSaveAutomation={
                                handleEditSaveAutomation
                              }
                              ehitAnchorEl={ehitAnchorEl}
                              handleEditClose={handleEditClose}
                              handleMenuItemSelect={handleMenuItemSelect}
                             
                              
                            />
                            <EditAutomationDrawer
                              isEditDrawerOpen={isEditDrawerOpen}
                              setIsEditDrawerOpen={setIsEditDrawerOpen}
                              selectedAutomationData={selectedAutomationData}
                              handleDeleteAutomation={handleDeleteAutomation}
                              handleEditTemplateChange={
                                handleEditTemplateChange
                              }
                              emailTemplateOptions={emailTemplateOptions}
                              invoiceTemplateOptions={invoiceTemplateOptions}
                              organizerOptions={organizerOptions}
                              proposalElsOptions={proposalElsOptions}
                              optionfolder={optionfolder}
                              setSelectedAutomationIndex={
                                setSelectedAutomationIndex
                              }
                              handleEditConditions={handleEditConditions}
                              handleEditClick={handleEditClick}
                              handleEditSaveAutomation={
                                handleEditSaveAutomation
                              }
                              ehitAnchorEl={ehitAnchorEl}
                              handleEditClose={handleEditClose}
                              handleMenuItemSelect={handleMenuItemSelect}
                              isConditionsEditFormOpen={
                                isConditionsEditFormOpen
                              }
                              setIsConditionsEditFormOpen={
                                setIsConditionsEditFormOpen
                              }
                              selectedAutomationIndex={selectedAutomationIndex}
                              handleEditGoBack={handleEditGoBack}
                              handleEditCheckboxChange={
                                handleEditCheckboxChange
                              }
                              handleEditAddTags={handleEditAddTags}
                              searchTerm={searchTerm}
                              handleSearchChange={handleSearchChange}
                              filteredTags={filteredTags}
                              stageAutomationTags={stageAutomationTags}
                              setTempSelectedTags={setTempSelectedTags}
                            />

                            <Box>
                              {stage.automations.length > 0 && (
                                <Box
                                  sx={{
                                    display: "flex",
                                    flexDirection: "column",
                                    gap: 1,
                                    mt: 2,
                                  }}
                                >
                                  {stage.automations.map((automation, idx) => (
                                    <Card
                                      key={idx}
                                      sx={{
                                        width: "100%",
                                        boxShadow:
                                          "0px 1px 5px rgba(0,0,0,0.1)",
                                      }}
                                    >
                                      <CardContent>
                                        <Typography
                                          variant="body2"
                                          fontWeight="bold"
                                        >
                                          {idx + 1}. {automation.type}
                                        </Typography>
                                        {automation.template && (
                                          <Typography
                                            variant="body2"
                                            color="text.secondary"
                                          >
                                            {automation.template.label.length >
                                            25
                                              ? `${automation.template.label.slice(0, 25)}...`
                                              : automation.template.label}
                                          </Typography>
                                        )}
                                        {automation.tags &&
                                          automation.tags.length > 0 && (
                                            <Box
                                              sx={{
                                                display: "flex",
                                                gap: 1,
                                                flexWrap: "wrap",
                                                marginTop: 2,
                                              }}
                                            >
                                              <Typography variant="body2">
                                                Conditions:
                                              </Typography>
                                              {automation.tags.map((tag) => (
                                                <Box
                                                  key={tag._id}
                                                  sx={{
                                                    backgroundColor:
                                                      tag.tagColour,
                                                    color: "#fff",
                                                    fontSize: "12px",
                                                    fontWeight: "600",
                                                    textAlign: "center",
                                                    padding: "3px 8px",
                                                    borderRadius: "12px",
                                                    marginBottom: "4px",
                                                  }}
                                                >
                                                  {tag.tagName}
                                                </Box>
                                              ))}
                                            </Box>
                                          )}
                                      </CardContent>
                                    </Card>
                                  ))}
                                </Box>
                              )}
                            </Box>
                          </Box>
                        </Box>
                      </Box>
                      {index < stages.length - 1 && (
                        <IconButton onClick={() => handleAddStage(index + 1)}>
                          <LuPlusCircle
                            style={{
                              color: "var(--color-save-btn",
                              width: "25px",
                              height: "25px",
                            }}
                          />
                        </IconButton>
                      )}
                    </React.Fragment>
                  ))}
                </Box>
                <Box mt={3} sx={{ flexShrink: 0 }}>
                  <Button
                    variant="contained"
                    startIcon={<LuPlusCircle />}
                    onClick={handleAddStage}
                    sx={{
                      backgroundColor: "var(--color-save-btn)", // Normal background

                      "&:hover": {
                        backgroundColor: "var(--color-save-hover-btn)", // Hover background color
                      },
                      borderRadius: "15px",
                    }}
                  >
                    Add stage
                  </Button>
                </Box>
              </Box>
            </Box>

            <Box sx={{ pt: 2, display: "flex", alignItems: "center", gap: 5 }}>
              <Button
                onClick={updatePipe}
                variant="contained"
                sx={{
                  backgroundColor: "var(--color-save-btn)", // Normal background

                  "&:hover": {
                    backgroundColor: "var(--color-save-hover-btn)", // Hover background color
                  },
                  borderRadius: "15px",
                }}
              >
                Save & exit
              </Button>
              <Button
                onClick={updateSavePipe}
                variant="contained"
                sx={{
                  backgroundColor: "var(--color-save-btn)", // Normal background

                  "&:hover": {
                    backgroundColor: "var(--color-save-hover-btn)", // Hover background color
                  },
                  borderRadius: "15px",
                  width: "80px",
                }}
              >
                Save
              </Button>
              <Button
                variant="outlined"
                onClick={hanleCloseupdate}
                sx={{
                  borderColor: "var(--color-border-cancel-btn)", // Normal background
                  color: "var(--color-save-btn)",
                  "&:hover": {
                    backgroundColor: "var(--color-save-hover-btn)", // Hover background color
                    color: "#fff",
                    border: "none",
                  },
                  width: "80px",
                  borderRadius: "15px",
                }}
              >
                Cancel
              </Button>
            </Box>
          </Box>
        </form>
      </Box>